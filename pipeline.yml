---
resource_types:
- name: azure-blobstore
  type: docker-image
  source:
    repository: pcfabr/azure-blobstore-resource


resources:
- name: source-repo
  type: git
  source:
    uri: https://github.com/patrick-huber-pivotal/cf-policy-pipeline
    username: ((git_username))
    password: ((git_password))

- name: bucket
  type: azure-blobstore
  source:
    storage_account_name: ((storage_account_name))
    storage_account_key: ((storage_account_key))
    container: ((container))
    versioned_file: database.db

jobs:
- name: create-database
  plan:
  - get: source-repo
  - task: export-data
    file: source-repo/tasks/export-data/task.yml
    params:
      CF_USERNAME: ((cf_username))
      CF_TARGET: ((cf_target))
      CF_PASSWORD: ((cf_password))
      CF_SYS_DOMAIN: ((cf_sys_domain))
      OM_USERNAME: ((om_username))
      OM_PASSWORD: ((om_password))
      OM_TARGET: ((om_target))
      OM_SKIP_SSL_VALIDATION: ((om_skip_ssl_validation))
  - task: populate-database
    file: source-repo/tasks/populate-database/task.yml  
  - put: bucket
    params:
      file: database/database.db

- name: apps-without-autoscaler-query
  plan:
  - get: source-repo
  - get: bucket
  - task: query
    file: source-repo/tasks/query/task.yml
    input_mapping:
      database: bucket
    params:
      QUERY: |
         SELECT a.Name as APP, 
                sp.Name as SPACE, 
                o.Name as ORG
         FROM APPS a
         LEFT JOIN SERVICE_BINDINGS sb
           on sb.APP_ID = a.ID
         LEFT JOIN SERVICE_INSTANCES si
           on si.ID = sb.SERVICE_INSTANCE_ID
         LEFT JOIN SERVICES s
           on  s.ID = si.SERVICE_ID
           and s.NAME = 'app-autoscaler'
         LEFT JOIN SPACES sp
           on a.SPACE_ID = sp.ID
         LEFT JOIN ORGANIZATIONS o
           on o.ID = sp.ORGANIZATION_ID
         WHERE sb.ID is null
           and o.Name not in ("system");

- name: apps-with-one-instance-query
  plan:
  - get: source-repo
  - get: bucket
  - task: query
    file: source-repo/tasks/query/task.yml
    input_mapping:
      database: bucket
    params:
      QUERY: |
        SELECT a.Name as APP, 
               sp.Name as SPACE, 
               o.Name as ORG,
               su.INSTANCES as INSTANCES
        FROM APPS a
        LEFT JOIN APP_SUMMARIES su
          on su.ID = a.ID         
        LEFT JOIN SPACES sp
          on a.SPACE_ID = sp.ID
        LEFT JOIN ORGANIZATIONS o
          on o.ID = sp.ORGANIZATION_ID
        WHERE su.Instances = 1
          and o.Name not in ("system");

- name: apps-without-domain-route
  plan:
  - get: source-repo
  - get: bucket
  - task: query
    file: source-repo/tasks/query/task.yml
    input_mapping:
      database: bucket
    params:
      QUERY: |
        SELECT APP,
               SPACE,
               ORG
        FROM(
            SELECT a.Name as APP,
                   sp.Name as SPACE,
                   o.Name as ORG,
                   SUM(
                     CASE d.Name
                   WHEN 'gslb.dell.azure.pivotal.rocks'
                     THEN 1
                   ELSE 0
                   END) as COUNT
            FROM APPS a
            INNER JOIN SPACES sp
              on a.SPACE_ID = sp.ID
            INNER JOIN ORGANIZATIONS o
              on o.ID = sp.ORGANIZATION_ID
            LEFT JOIN ROUTE_MAPPINGS rm
              on rm.APP_ID = a.ID
            LEFT JOIN ROUTES r
              on r.ID = rm.ROUTE_ID
            LEFT JOIN DOMAINS d
              on d.ID = r.DOMAIN_ID
            WHERE o.Name not in ("system")
            GROUP BY a.Name, sp.Name, o.Name
        ) WHERE COUNT = 0;

- name: certificates-query
  plan:
  - get: source-repo
  - get: bucket
  - task: query
    file: source-repo/tasks/query/task.yml
    input_mapping:
      database: bucket
    params:
      QUERY: |
        SELECT * 
        FROM CERTIFICATES
        ORDER BY datetime(VALID_UNTIL) ASC;

- name: certificate-authorities-query
  plan:
  - get: source-repo
  - get: bucket
  - task: query
    file: source-repo/tasks/query/task.yml
    input_mapping:
      database: bucket
    params:
      QUERY: |
        SELECT * 
        FROM CERTIFICATE_AUTHORITIES
        ORDER BY datetime(EXPIRES_ON) ASC;

- name: certificates-expiring-in-3-months
  plan: 
  - get: source-repo
  - get: bucket
  - task: query
    file: source-repo/tasks/query/task.yml
    input_mapping:
      database: bucket
    output_mapping:
      results: results
    params:
      QUERY: |
        SELECT * 
        FROM CERTIFICATES
        WHERE date(VALID_UNTIL) <= date('now', '3 months');
  - in_parallel:
    - task: alert
      file: source-repo/tasks/alert-rows-exist/task.yml
      input_mapping:
        results: results
        source-repo: source-repo
      params:
        SKIP_HEADER: true
        FILE: report.csv

- name: apps-with-autoscaler-misconfiguration
  plan: 
  - get: source-repo
  - get: bucket
  - task: query
    file: source-repo/tasks/query/task.yml
    input_mapping:
      database: bucket
    output_mapping:
      results: results
    params:
      QUERY: |
        SELECT * FROM(
            SELECT a.name as APP,
                   s.name as SPACE,
                   o.name as ORG,
                   CASE 
                   WHEN npb.DESTINATION_ID is null 
                     THEN 0
                   ELSE 1
                   END as IS_C2C_BACKEND,
                   aar.RULE_TYPE
            FROM APPS a 
            INNER JOIN SPACES s 
              on a.SPACE_ID = s.ID
            INNER JOIN ORGANIZATIONS o
              on s.ORGANIZATION_ID = o.ID
            INNER JOIN APP_AUTOSCALERS aa
              on aa.APP_ID = a.ID
            INNER JOIN APP_AUTOSCALER_RULES aar
              on aar.APP_ID = aa.APP_ID
            LEFT JOIN NETWORKING_POLICIES npb
              on npb.DESTINATION_ID = a.ID
        ) WHERE IS_C2C_BACKEND = 1 AND (
                RULE_TYPE == 'http_latency'
                OR RULE_TYPE == 'http_throughput')
             OR IS_C2C_BACKEND = 0 AND RULE_TYPE == 'cpu'
